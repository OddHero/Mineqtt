plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    // Add HiveMQ MQTT client dependency for bundling
    shadowBundle("com.hivemq:hivemq-mqtt-client:1.3.7")
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'

    // Relocate HiveMQ packages to avoid conflicts with other mods
    relocate('com.hivemq', 'art.rehra.mineqtt.libs.hivemq')
    relocate('io.reactivex', 'art.rehra.mineqtt.libs.reactivex')
    relocate('org.reactivestreams', 'art.rehra.mineqtt.libs.reactivestreams')
    relocate('org.jetbrains', 'art.rehra.mineqtt.libs.jetbrains')
    relocate('org.jctools', 'art.rehra.mineqtt.libs.jctools')
    relocate('org.intellij', 'art.rehra.mineqtt.libs.intellij')
    relocate('javax.inject', 'art.rehra.mineqtt.libs.javax.inject')
    relocate('dagger', 'art.rehra.mineqtt.libs.dagger')

    // Exclude netty as it is already provided by Fabric/Minecraft
    exclude 'io/netty/**'
    exclude 'META-INF/services/io.netty.**'

    exclude 'META-INF/services/reactor.blockhound.integration.BlockHoundIntegration'

    // Ensure all classes are included
    mergeServiceFiles()
}

remapJar {
    input.set shadowJar.archiveFile
}
