plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')


    // Add HiveMQ shaded client to shadowBundle
    implementation("com.hivemq:hivemq-mqtt-client-shaded:1.3.7")
    shadowBundle("com.hivemq:hivemq-mqtt-client-shaded:1.3.7")

    //include 'com.hivemq:hivemq-mqtt-client-shaded:1.3.7'

}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
    // Relocate HiveMQ packages to avoid conflicts with other mods
    relocate('com.hivemq', 'art.rehra.mineqtt.libs.hivemq')

    // Exclude problematic service files
    exclude 'META-INF/services/reactor.blockhound.integration.BlockHoundIntegration'

    // Ensure all classes are included
    mergeServiceFiles()
}

remapJar {
    input.set shadowJar.archiveFile
}
